# name : 幫這個 workflow 取名，可以省略，預設會使用 .yml 的檔名
name:
  deploy-container

  # on 代表 workflow 的觸發條件，此範例為：
  # 當有路徑 packages/container/**的檔案更新，
  # 並且 commit push to master 時要執行這個 workdlows
on:
  push:
    branches:
      - master
    paths:
      - 'packages/container/**'
defaults:
  run:
    # 這裡定義我們底下的指令（如yarn相關指令）都只會在這個 packages/container 路徑執行
    working-directory: packages/container

# 建立一個名為 build 的 job（負責build & deploy)，
# 多個 jobs 預設會是平行( parallel) 執行的，但如果 jobs 間存在依賴關係，那它們的執行順序開發者也是可以自行指定的
jobs:
  build:
    # runs-on 則是指定要運行的環境（github內部建立），這個專案是使用 ubuntu
    runs-on: ubuntu-latest
  steps:
    # 其中的 uses 字段可以直接使用其他開發者寫好並發佈的 actions，以上圖中的 actions/checkout@v2 為例，其實就是直接使用這個 action，所做的是在剛剛 run on 字段指定的 ubuntu 執行環境中抓取我們專案的程式碼（畢竟原本的執行環境就是一台空空的虛擬主機而已）
    - uses: actions/checkout@v2
    - run: yarn
    - run: yarn run build

    # - uses: shinyinc/action-aws-cli@v1.2
    # # 以下指令會讓 aws a3 cli 去 sync dist 路徑的內容（build完成後會產生的資料夾）
    # - run: aws s3 sync dist s3://${{ secrets.AWS_S3_BUCKET_NAME }}/container/latest
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_DEFAULT_REGION: ''
